
// Include necessary libraries
#include <iostream>
#include <map>

// Use standard library namespace
using namespace std;

// Theme class definition
class Theme {
public:
    string backgroundColor; // Background color
    string fontColor;        // Font color
    int fontSize;            // Font size
    string iconStyle;        // Icon style

    // Constructor to initialize theme properties
    Theme(string backgroundColor, string fontColor, int fontSize, string iconStyle) {
        this->backgroundColor = backgroundColor;
        this->fontColor = fontColor;
        this->fontSize = fontSize;
        this->iconStyle = iconStyle;
    }

    // Method to display theme properties
    void display() {
        cout << "Background Color: " << backgroundColor << endl;
        cout << "Font Color: " << fontColor << endl;
        cout << "Font Size: " << fontSize << endl;
        cout << "Icon Style: " << iconStyle << endl;
    }
};

// Main function
int main() {
    // Create a map to store themes
    map<string, Theme*> themes;

    // Add themes to the map
    themes.emplace("Classic", new Theme("green background", "red font", 3, "Classic"));
    themes.emplace("Sport", new Theme("red background", "white font", 5, "Sport"));
    themes.emplace("Eco", new Theme("pink background", "brown font", 32, "Eco"));

    // Prompt user to choose a theme
    cout << "Choose which theme you want" << endl;

    bool flag = true;
    while (flag) {
        // Display theme options
        cout << "1. Classic \n2. Sport \n3. Eco \n4. Exit" << endl;

        int option;
        cin >> option;

        // Handle user input
        switch (option) {
            case 1: {
                // Display Classic theme
                auto classicTheme = themes["Classic"];
                classicTheme->display();
                break;
            }
            case 2: {
                // Display Sport theme
                auto sportTheme = themes["Sport"];
                sportTheme->display();
                break;
            }
            case 3: {
                // Display Eco theme
                auto ecoTheme = themes["Eco"];
                ecoTheme->display();
                break;
            }
            case 4: {
                // Exit program
                flag = false;
                break;
            }
            default: {
                // Handle invalid input
                cout << "Please enter a valid option" << endl;
            }
        }
    }

    // Clean up dynamically allocated memory
    for (auto& theme : themes) {
        delete theme.second;
    }

    return 0;
}
